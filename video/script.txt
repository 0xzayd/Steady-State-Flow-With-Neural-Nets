
Hello, my name is oliver hennigh and this is a half way progress report for the Aigrant.

Back in May I recieved the Aigrant to fund my research in compressing computational physics simulations with neural networks and other work related to automated design. This grant is supporting me here in Guanajuoto for 9 months and im roughly on month 5 mark. In this video I will go over all the work I have done so far as well as my future plans. There are three main things I tried to do so far. Create an unsupervised loss function to train neural networks in predicting steady state fluid flow, a multi resolution method for predicting flow that allows steady state fluid flow to be predicted at a high resolution, latstly, automated design using gradient descent and neural networks.

One of the main idea I had was an unsupervied loss function to train the flow prediction network. This can be understood in this picture where the flow network predictes a steady state solution to the fluid flow and then the prediction is passed into an actual flow solver. The flow solver then performs some iterations getting closer to the true steady state. The idea is that if the network predicts the true steady state flow then the diffrence between the network output and the flow sovler will be zero. This can be formulated as a loss function minimizing the diffrence between the two. The reason this would be great is because it would allow the neural network to be trained with only a dataset of object geometries instead of a dataset of object geometries and their precomputed steady state flow.

Unfortunatly this aspect of my research was unsucessful and I was never able to train the network to a reasonable level of accuracy. The problem was that the flow prediction network always underprediced the fluid flow. This can be seen in the following figure where the top is the prediced flow and the middle image is the true steady state. I tried a ton of approaches to try and solve this problem such as messing around with other loss fucntions like Gradient image diffrence loss, iterating longer in the flow solver so the diffrence would be closer to the true steady state, implementing the flow solver in tensorflow so that a gradient can be backpropogated through it possibly making the learning better. While some of this stuff helped a little, nothing ever got close to solving the problem. I now believe there is an underling reason why this method may never work. This is that the loss function itself is highly nonconvex. Its not clear at all predicting a flow that is similar to a the flow after running the flow solver on it will. It seems that the network learns to predict a blury uniform flow that is pretty far from steady state but still wont change that much from the flow solver.

At any rate, after spending a lot of time trying to get this to work I finally had to give up and continue on with other pieces of my project.

The next thing I tried was multi resolution techniques for predicting the fluid flow. The idea was that you could train a neural network on a set of low resolution flows and then have the model predicted high resolution flow in a similar way to the super resolution work. There was a lot of stuff I tried here but ultimatly I decided to scrap this part of the project. The main reason was because I realized there is a fundamental diffrence to super resolution on images and upping the resolution of a fluid flow. And thats that when doing super resolution on an image only local information is really needed to predict the high resolution on any given pixel. In contrast, you actually really need global information when predicting the flow at any point. Even small changes in the objects geometry would effect the flow at every part of the simulation. This can be done with things like dialated convolutions but the negatives started to outway the benifits and I decided to move on.

This brings me to the main piece of my project which using a neural networks to do automated design. So taking a step back from the the fluid flow stuff I have talked about so far, The idea here is that if you have a neural network that can predict some physical system, ah fluid flow in this case, then there are some neat ways you can use it to . This was really what my project set out to do and I am happy to say that I was successful in this.

This finally brings me to future work. In my origial grant I . The library is ment to have the same funtionality of a typical fluid simulation library and I





Thanks again to the Aigrant! None of this would have been possible without this generous support.




